МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ
ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ


Кафедра "Програмної інженерії"




ЗВІТ
З лабораторної роботи №5
з дисципліни
"Аналіз та рефакторинг коду"



Виконав:                                                                                                  Перевірив                      
ст. гр. ПЗПІ-22-8                                                                      ст. викладач каф. ПІ
Товстуха Іван                                                                                     Сокорчук І. П.












Харків 2024

5 РОЗГОРТАННЯ ПРОГРАМНОЇ СИСТЕМИ ТА ДЕМОНСТРАЦІЯ ЇЇ РОБОТИ

5.1	Мета роботи
Метою роботи є розгортання програмної системи та демонстрація її роботи.
5.2	Хід роботи
5.2.1	Опис проекту
     Проект AquaSense - це програмно-апаратна система для автоматизації та моніторингу параметрів акваріума. Основна ідея полягає у створенні IoT-рішення, яке забезпечує інтеграцію сенсорів для моніторингу таких параметрів, як температура води, рівень кисню та pH. Відповідно до цих параметрів система автоматично керує пристроями, такими як термостат, аератор та контролер pH, щоб забезпечити ідеальні умови для життя водних організмів. Основними компонентами є ESP32 для збору та обробки даних із сенсорів і керування пристроями, сервер Node.js для обробки даних і комунікації, база даних MySQL для збереження історичних даних, а також MQTT-брокер Mosquitto для зв'язку між пристроями. Важливою частиною є симуляція сенсорів і пристроїв у середовищі Wokwi, яка дає змогу перевірити систему без фізичного обладнання.
     Система складається з кількох важливих компонентів. ESP32 підключається до Wi-Fi і взаємодіє з MQTT-брокером, отримуючи команди від сервера та передаючи дані сенсорів. Сервер, розгорнутий на Node.js із використанням Express.js, обробляє отримані дані та приймає рішення щодо керування пристроями. У базі даних MySQL зберігаються як поточні значення сенсорів, так і історія їхніх змін, а також логи роботи пристроїв. Додатково сервер записує зміни до логів, щоб користувач міг переглядати історію роботи системи. 
     
     Для симуляції у Wokwi створено схему, яка містить ESP32, OLED-дисплей для візуалізації даних, та три світлодіоди, які імітують стан керованих пристроїв. Уся система працює інтегровано, забезпечуючи як автономність, так і прозорість дій для користувача.
5.2.2	Інженерні рішення
     Розробка AquaSense включала кілька важливих інженерних рішень. Для забезпечення безперебійної роботи та масштабованості було обрано MQTT-протокол для комунікації між сервером і ESP32. MQTT добре підходить для IoT-систем завдяки своїй легкості та здатності працювати в умовах низької пропускної здатності мережі. Для зберігання даних обрано MySQL як стабільне рішення для реляційних баз даних, що дозволяє легко зберігати й аналізувати дані сенсорів та логи. Сервер побудовано на Node.js із використанням Express.js, що забезпечує швидкий і зручний спосіб створення API для роботи з клієнтськими та серверними запитами.
     Симуляція пристроїв у Wokwi дозволяє знизити витрати на апаратне забезпечення під час розробки. У Wokwi була розроблена схема з ESP32, OLED-дисплеєм і світлодіодами для демонстрації роботи системи. Дисплей показує поточні значення сенсорів і стан пристроїв, що дозволяє в реальному часі спостерігати за роботою системи. У серверній логіці реалізовано алгоритми перевірки значень сенсорів із визначенням, чи знаходяться вони в межах норми. У разі виявлення відхилень сервер надсилає команди на ESP32 для активації відповідних пристроїв і повернення параметрів у норму. Це дозволяє системі працювати автономно, мінімізуючи втручання користувача. Вибір публічного MQTT-брокера Mosquitto дозволив швидко інтегрувати сервер і ESP32 без необхідності налаштування власного брокера. Усе це забезпечує надійну роботу, зручність у налаштуванні й обслуговуванні системи.
     
     
5.2.3	Розгортання системи
     Розгортання системи починається зі встановлення всіх необхідних інструментів для роботи над проєктом. Спершу переконайтеся, що у вас встановлено Node.js та npm для запуску серверного коду. Якщо вони не встановлені, завантажте їх із офіційного сайту Node.js. Після встановлення відкрийте термінал і перевірте версії командою node -v та npm -v.
     Далі завантажте або склонуйте репозиторій із проєктом у вашу локальну систему за допомогою команди:
     git clone https://github.com/NureTovstukhaIvan/AquaSense.git
     Перейдіть до папки проєкту за допомогою терміналу і виконайте команди npm install express, npm install --save-dev nodemon, npm install mysql2, npm install mqtt, npm install swagger-ui-express, щоб встановити всі необхідні бібліотеки і залежності, для роботи з системою. Переконайтеся, що у вас встановлений MySQL, а потім створіть базу даних із відповідною структурою, використовуючи SQL-скрипт, наданий у проєкті.
     Запустіть серверну частину проєкту за допомогою команди node index.js. Переконайтеся, що сервер працює, відкривши у веб-браузері адресу http://localhost:3000 або http://localhost:3000/api-docs, де буде доступна документація Swagger для API.
     Для налаштування IoT-пристроїв потрібно завантажити і налаштувати середовище Wokwi. У цьому середовищі створіть діаграму, яка відповідає наданому файлу diagram.json, або імпортуйте цей файл безпосередньо у Wokwi. Завантажте код для ESP32 в середовище, підключіть симуляцію пристроїв і переконайтеся, що вони взаємодіють із сервером через MQTT-брокер. Для цього використовується публічний брокер test.mosquitto.org, який за замовчуванням інтегрований у сервер і ESP32.
     Додатково налаштуйте середовище для відображення повідомлень у серійному моніторі Wokwi, щоб перевіряти, як пристрої надсилають дані до сервера і отримують відповіді. 
     Переконайтеся, що всі сенсори генерують значення, пристрої активуються при відхиленні показників від норми, а база даних оновлюється відповідно до логіки проєкту.
     Після цього запустіть тестування системи. Перевірте, чи значення сенсорів оновлюються в базі даних, чи працює увімкнення і вимкнення пристроїв, чи генеруються правильні логи. Якщо все працює, як очікувалося, система готова до використання.
5.3	Висновки
	У результаті було успішно створено та налаштовано всі необхідні компоненти системи, зокрема сервер, базу даних, а також симуляцію пристроїв та сенсорів у середовищі Wokwi. Всі модулі системи працюють злагоджено: дані від сенсорів передаються через MQTT-брокер на сервер, обробляються відповідно до встановлених правил, а пристрої реагують на зміни показників.
     Система успішно пройшла тестування: показники сенсорів оновлюються в базі даних, пристрої автоматично вмикаються та вимикаються у разі відхилення значень від норми, логи записуються коректно. Таким чином, можна зробити висновок, що система розгорнута успішно, і всі її компоненти функціонують відповідно до поставлених вимог.

Посилання на відеозапис: https://youtu.be/2GjPCpb_c9w
