МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ
ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ


Кафедра "Програмної інженерії"




ЗВІТ
З лабораторної роботи №4
з дисципліни
"Аналіз та рефакторинг коду"



Виконав:                                                                                                  Перевірив                      
ст. гр. ПЗПІ-22-8                                                                      ст. викладач каф. ПІ
Товстуха Іван                                                                                     Сокорчук І. П.












Харків 2024

4 РОЗРОБКА IoT КЛІЄНТА (БІЗНЕС-ЛОГІКИ ТА ФУНКЦІЙ НАЛАШТУВАННЯ)

4.1	Мета роботи
     Розробити програмне забезпечення для  IoT або SmartDevice пристрою, створеного на базі будь-якої поширеної на  сьогодні платформи, придатної для реалізації вбудованих систем (Embedded  System).
4.2	Хід роботи
4.2.1	Опис інженерних рішень
     Вибір апаратної платформи для проекту AquaSense був зроблений на користь мікроконтролера ESP32. Це рішення обґрунтоване його високою продуктивністю, інтегрованою підтримкою Wi-Fi та Bluetooth, а також широкою сумісністю з бібліотеками для роботи з різними сенсорами та дисплеями. Зокрема, було обрано модуль DevkitC, що забезпечує достатню кількість GPIO для підключення сенсорів і пристроїв, таких як світлодіоди.
У системі використовуються три основні сенсори для моніторингу параметрів акваріума. Температурний сенсор відповідає за контроль температури води, сенсор кисню вимірює концентрацію кисню, а сенсор pH визначає рівень кислотності. Дані цих сенсорів генеруються, передаються на сервер за допомогою MQTT-протоколу, де вони обробляються для прийняття подальших рішень.
     Для автоматизації процесів в акваріумі реалізовано управління трьома пристроями: термостатом для регулювання температури, аератором для підвищення рівня кисню та контролером pH для стабілізації кислотності. Увімкнення та вимкнення цих пристроїв контролюється сервером, який отримує дані від сенсорів через MQTT, аналізує їх і надсилає відповідні команди.
     
     Основним протоколом для зв'язку між ESP32 і сервером є MQTT, що забезпечує швидкий і надійний обмін повідомленнями. Для кожного сенсора створено окремі топіки, такі як aquarium/sensor/temperature, aquarium/sensor/oxygen, aquarium/sensor/ph, у які передаються їхні значення. Команди для пристроїв сервер надсилає в топік aquarium/device/control.
Для локального відображення інформації про стан акваріума використовується OLED-дисплей. Він показує поточні значення сенсорів та статуси пристроїв (ON/OFF). Виведення інформації на дисплей відбувається лише після оновлення показників сенсора або зміни стану пристроїв, що зменшує зайве навантаження на систему.
     Інтеграція IoT-пристроїв із сервером забезпечується за рахунок Node.js і MySQL. Сервер збирає дані від сенсорів, аналізує їх, зберігає в базу даних і, у разі необхідності, надсилає команди управління пристроями. MQTT-брокер (test.mosquitto.org) використовується для передачі даних між ESP32 і сервером.
     Моніторинг сенсорів здійснюється по черзі з паузою у 5 секунд. Якщо значення сенсора виходить за межі норми, сервер активує відповідний пристрій, який коригує параметр до норми. Після цього пристрій вимикається, і система продовжує цикл моніторингу.
     Зважаючи на необхідність постійного моніторингу, ESP32 працює у стандартному режимі, без переходу в глибокий сон. Це забезпечує стабільну роботу з мережею Wi-Fi та зменшує затримки між операціями.
     Програмне забезпечення ESP32 реалізоване на C++ з використанням бібліотек для роботи з Wi-Fi, MQTT та OLED-дисплеєм. Код забезпечує генерацію тестових даних сенсорів, управління пристроями та обмін даними через MQTT. Серверна частина написана на Node.js із використанням Express.js і MySQL, що дозволяє зберігати та обробляти всі дані про сенсори, пристрої та логи.
     
     Масштабованість системи досягається завдяки використанню MQTT і модульного підходу до проектування. Для інтеграції нових сенсорів або пристроїв достатньо додати новий MQTT-топік і внести відповідні зміни в серверний код і прошивку ESP32.
     Переваги реалізованого рішення включають мінімізацію ручного втручання, оскільки пристрої автоматично реагують на зміни параметрів. Завдяки MQTT забезпечується моніторинг у реальному часі. Локальний OLED-дисплей дає можливість користувачу швидко отримати інформацію про стан акваріума, а програмна архітектура дозволяє легко адаптувати систему до нових вимог.
     У системі для автоматизації акваріума відбувається математична обробка даних, пов'язана з моніторингом сенсорів, корекцією їх значень та оцінкою відповідності даних до заданих норм. Нижче наведено основні аспекти математичної обробки з поясненнями та кодом:
1) Генерація випадкових значень сенсорів.
     Сенсори акваріума генерують випадкові значення в заданих межах з додаванням шуму. Це моделює реальну зміну параметрів, таких як температура, рівень кисню та рівень pH.
     temperature += random(-15, 15) * 0.1;
     oxygen += random(-5, 5) * 0.1;
     ph += random(-5, 5) * 0.1;
     Параметри оновлюються додаванням випадкового значення, що генерується у заданому діапазоні. Це дозволяє симулювати коливання даних, які можуть виникати в реальному середовищі.
2) Перевірка відповідності нормам.
     Кожне значення сенсора порівнюється з межами норми. Якщо значення виходить за межі, активується відповідний пристрій, щоб скоригувати параметр.
     if (value < range[0]) {
     newValue = range[0]; // Корекція до мінімальної межі
     } else if (value > range[1]) {
     newValue = range[1]; // Корекція до максимальної межі
     }
     Ця перевірка гарантує, що значення сенсора не виходять за допустимі межі. Якщо параметр потребує корекції, система визначає, яке саме пристрій потрібно активувати.
3) Реалізація таймера для циклічного моніторингу.
     Для забезпечення стабільності даних використовується таймер, який відстежує інтервал між моніторингом сенсорів.
     if (millis() - lastSensorUpdate > sensorInterval) {
         lastSensorUpdate = millis();
         updateSensors();
     }
     Цей метод гарантує, що кожен сенсор перевіряється через визначений проміжок часу. Таким чином, сенсори моніторяться по черзі з однаковою періодичністю.
     
     
     


Рисунок 4.1 - Схема ІоТ пристрою програмної системи
4.2.2	Бізнес-логіка IoT клієнта
     IoT клієнт, реалізований на базі ESP32, виконує роль інтеграційного вузла для моніторингу стану акваріума, передачі даних на сервер і автоматичного управління пристроями для підтримання стабільних умов. Його робота заснована на взаємодії з сенсорами, сервером і пристроями (акторами), забезпечуючи автономність і зручність управління.
     IoT клієнт виконує моніторинг параметрів акваріума, таких як температура, рівень кисню і pH. Сенсори опитуються по черзі з інтервалом у п'ять секунд для забезпечення циклічної роботи без перевантаження. Після кожного вимірювання дані сенсорів публікуються на MQTT брокер, який є основним засобом комунікації між клієнтом і сервером. Сервер обробляє отримані дані, аналізує їх і в разі потреби надсилає IoT клієнту команди управління пристроями.
     Для управління пристроями, такими як термостат, аератор та pH-контролер, IoT клієнт отримує команди через MQTT. Після отримання команди клієнт змінює стан відповідного пристрою (увімкнення чи вимкнення) і вмикає або вимикає відповідний світлодіод. 
     Таким чином, забезпечується наочний індикатор роботи пристроїв. Крім того, стан пристроїв і актуальні показники сенсорів виводяться на OLED-дисплей. 
     Відображення оновлюється тільки після чергового моніторингу сенсора або виконання команди для оптимізації роботи системи.
     Комунікація через MQTT забезпечує надійний обмін даними між IoT клієнтом та сервером. IoT клієнт публікує дані сенсорів у визначені теми та підписується на тему управління пристроями. Це дозволяє системі реагувати на зміни параметрів акваріума в реальному часі.
     Ключовим принципом роботи IoT клієнта є циклічність. Усі дії виконуються по черзі, від моніторингу сенсора до управління пристроями і оновлення дисплея. Така організація дозволяє уникнути перевантажень і забезпечити стабільну роботу системи без постійної участі користувача.
4.2.3	Створити UML діаграму прецедентів ІоТ клієнта
     Діаграма структури бази даних демонструє взаємозв'язки між основними сутностями, які використовуються в системі AquaSense для управління акваріумами та моніторингу їх параметрів. 
     База даних побудована на основі реляційної моделі і складається з кількох взаємопов'язаних таблиць, кожна з яких відповідає за певний аспект функціональності системи.
     У таблиці Users зберігається інформація про користувачів системи. Вона включає такі дані, як ідентифікатор користувача, його ім'я, унікальну електронну пошту та хешований пароль. Це дозволяє системі забезпечувати авторизацію та безпечне управління доступом до функціональності. Кожен користувач може керувати кількома акваріумами, що створює зв'язок між таблицею Users і таблицею Aquariums.
     Таблиця Aquariums зберігає інформацію про окремі акваріуми, включаючи їх назву, ємність та зв'язок із користувачем через зовнішній ключ. 
     Цей зв'язок дозволяє ідентифікувати, яким саме акваріумом володіє конкретний користувач. Крім цього, акваріуми пов'язані із сенсорами та пристроями, які встановлені для моніторингу і управління умовами в акваріумах.
     Для збереження даних сенсорів використовується таблиця Sensors, яка містить дані про тип сенсора (наприклад, температура, рівень кисню чи pH), його поточні показники та зв'язок з акваріумом через зовнішній ключ. Ця таблиця є ключовою для моніторингу середовища акваріумів, оскільки вона постійно оновлюється даними, які надходять від IoT-пристроїв.
     Таблиця Devices відповідає за управління пристроями, які регулюють параметри акваріуму, такими як терморегулятори, аератори та контролери pH. Вона містить інформацію про статус кожного пристрою (увімкнено або вимкнено) та їх зв'язок із відповідним акваріумом.
     Для реєстрації подій використовується таблиця Logs, яка фіксує всі зміни параметрів сенсорів і станів пристроїв. Логи включають повідомлення про події, час їх створення та зв'язок із конкретним сенсором. Це забезпечує можливість аналізу історії подій та прийняття рішень щодо оптимізації роботи системи.
     Основна логіка бази даних ґрунтується на використанні зовнішніх ключів, що забезпечує зв'язність між таблицями. Наприклад, зв'язок між таблицями Users і Aquariums дозволяє встановити, які акваріуми належать конкретному користувачу. Аналогічно, зв'язок між таблицями Aquariums і Sensors дозволяє визначити, які сенсори встановлені в конкретному акваріумі.
     Структура бази даних є масштабованою і дозволяє додавати нові сенсори або пристрої без значних змін у логіці системи. Логічна цілісність забезпечується через використання реляційних обмежень, таких як первинні та зовнішні ключі, що гарантує стабільну роботу системи AquaSense.
     

Рисунок 4.2 - UML діаграма прецедентів ІоТ клієнта
4.2.4	Створити UML діаграму діяльності ІоТ клієнта.

     Цикл роботи пристрою IoT-клієнта на базі ESP32 організований таким чином, щоб забезпечити постійний моніторинг акваріумних параметрів, передачу даних на сервер і виконання команд управління. Основні етапи роботи описуються наступними процесами:
     Спершу пристрій виконує підключення до мережі. Початковим завданням є встановлення WiFi-з'єднання, яке є основою для зв'язку пристрою із сервером. Після підключення до WiFi-клієнт переходить до налаштування з'єднання з MQTT брокером. Якщо спроба підключення не вдається, клієнт виконує повторну спробу до моменту успішного з'єднання. 
     У разі підключення до брокера відбувається підписка на теми MQTT, зокрема на тему, яка відповідає за команди управління пристроями.
     Після встановлення підключення розпочинається моніторинг сенсорів, під час якого клієнт почергово зчитує значення параметрів акваріума: температури води, рівня кисню та рівня pH. Зчитані значення одразу передаються у відповідні MQTT-теми для обробки на сервері. Ці дані також оновлюються на OLED-дисплеї, щоб користувач міг локально спостерігати за поточними показниками середовища.
     Паралельно з моніторингом сенсорів IoT-клієнт постійно відстежує отримання команд через MQTT. У разі надходження команди клієнт ідентифікує її тип: увімкнення чи вимкнення одного з пристроїв. 
     Це можуть бути:
- Thermostat, який регулює температуру;
- Aerator, що відповідає за рівень кисню;
- pH Controller, який стабілізує рівень pH.
     Після виконання команди клієнт синхронізує статус пристрою. Вмикаються або вимикаються відповідні світлодіоди (LED), а оновлений статус відображається на OLED-дисплеї.
     Робота IoT-клієнта побудована як циклічний процес. Після моніторингу одного сенсора пристрій переходить до зчитування наступного. Перед переходом до нового циклу встановлюється затримка тривалістю 5 секунд, щоб забезпечити стабільність роботи. Цикл повторюється доти, доки пристрій залишається активним.
     Переваги реалізованого рішення:
- IoT-клієнт автономно виконує моніторинг сенсорів і реагує на зміни без втручання користувача;
- завдяки використанню MQTT дані сенсорів миттєво передаються на сервер для обробки;
- інформація про стан пристроїв і показники сенсорів відображається на OLED-дисплеї, забезпечуючи зручність для користувача;
- архітектура клієнта дозволяє легко інтегрувати нові сенсори або пристрої, масштабуючи систему;
- циклічна організація роботи з фіксованими затримками забезпечує рівномірну роботу сенсорів і пристроїв.
     Таким чином, цикл роботи IoT-клієнта в системі AquaSense побудований таким чином, щоб забезпечити ефективний і стабільний моніторинг, керування пристроями та синхронізацію в реальному часі.
   

Рисунок 4.3 - UML діаграма діяльності ІоТ клієнта.

4.4	Висновки

     У ході роботи було створено програмну систему, яка забезпечує автоматичний моніторинг і управління параметрами середовища (у даному випадку акваріума), використовуючи можливості платформи ESP32 та протоколу MQTT для обміну даними між пристроєм і сервером. 
     Розроблений IoT клієнт реалізує моніторинг даних із сенсорів (температура, рівень кисню, pH), публікує ці дані в топіки MQTT і отримує команди з сервера для керування пристроями (термостатом, аератором та контролером pH). Клієнт також синхронізує статус пристроїв із фізичними світлодіодами та OLED-дисплеєм, що забезпечує локальне інформування користувача про поточний стан системи. У результаті виконаної роботи було досягнуто автоматизації процесу моніторингу та регулювання параметрів середовища, забезпечено стабільність і надійність зв'язку між компонентами системи, а також створено гнучку основу для подальшого масштабування чи інтеграції нових сенсорів та пристроїв.
     ДОДАТОК А
     Програмний код ІоТ клієнта
     
     1. #include <WiFi.h> 
     2. #include <PubSubClient.h> 
     3. #include <Adafruit_SSD1306.h> 
     4.  
     5. // WiFi 
     6. const char* ssid = "Wokwi-GUEST"; 
     7. const char* password = ""; 
     8.  
     9. // MQTT 
     10. const char* mqtt_server = "test.mosquitto.org";  // Публічний брокер Mosquitto 
     11. const int mqtt_port = 1883; 
     12. WiFiClient espClient; 
     13. PubSubClient client(espClient); 
     14.  
     15. // OLED дисплей 
     16. #define SCREEN_WIDTH 128 
     17. #define SCREEN_HEIGHT 64 
     18. Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, -1); 
     19.  
     20. // Теми MQTT 
     21. const char* temp_topic = "aquarium/sensor/temperature"; 
     22. const char* oxygen_topic = "aquarium/sensor/oxygen"; 
     23. const char* ph_topic = "aquarium/sensor/ph"; 
     24. const char* device_control_topic = "aquarium/device/control"; 
     25.  
     26. // Стани пристроїв 
     27. bool thermostat_status = false; 
     28. bool aerator_status = false; 
     29. bool phController_status = false; 
     30.  
     31. // Таймери 
     32. unsigned long lastSensorUpdate = 0; 
     33. const unsigned long sensorInterval = 5000; // Інтервал оновлення сенсорів 
     34.  
     35. // Глобальні змінні для значень сенсорів 
     36. float temperature = 25.0; // Початкова температура 
     37. float oxygen = 5.0;       // Початковий рівень кисню 
     38. float ph = 6.0;           // Початковий рівень pH
     39.  
     40. // Діапазони норми 
     41. const float TEMP_MIN = 22.0, TEMP_MAX = 28.0; 
     42. const float OXYGEN_MIN = 4.0, OXYGEN_MAX = 10.0; 
     43. const float PH_MIN = 5.0, PH_MAX = 8.0; 
     44. 
     45. // GPIO для світлодіодів 
     46. const int thermostat_led = 25; 
     47. const int aerator_led = 26; 
     48. const int phController_led = 27; 
     49. 
     50. // Поточний сенсор для оновлення
     51. int currentSensor = 0; 
     52.  
     53. // Підключення до Wi-Fi 
     54. void setup_wifi() { 
     55.   delay(10); 
     56.   Serial.println("Connecting to WiFi..."); 
     57.   WiFi.begin(ssid, password); 
     58.   while (WiFi.status() != WL_CONNECTED) { 
     59.     delay(1000); 
     60.     Serial.println("Connecting..."); 
     61.   } 
     62.   Serial.println("WiFi connected!"); 
     63. } 
     64.  
     65. // Функція підключення до MQTT 
     66. void reconnect() { 
     67.   while (!client.connected()) { 
     68.     Serial.println("Connecting to MQTT..."); 
     69.     if (client.connect("ESP32-Aquarium")) { 
     70.       Serial.println("Connected to MQTT!"); 
     71.       client.subscribe(device_control_topic); // Підписка на тему для контролю пристроїв 
     72.     } else { 
     73.       delay(5000); 
     74.     } 
     75.   } 
     76. } 
     77.  
     78. // Обробка вхідних повідомлень MQTT
     79. void callback(char* topic, byte* payload, unsigned int length) {
     80.   String message;
     81.   for (unsigned int i = 0; i < length; i++) {
     82.     message += (char)payload[i];
     83.   }
     84. 
     85.   if (String(topic) == device_control_topic) {
     86.     if (message == "thermostat_on") {
     87.       thermostat_status = true;
     88.       digitalWrite(thermostat_led, HIGH); // Увімкнути LED
     89.     } else if (message == "thermostat_off") {
     90.       thermostat_status = false;
     91.       digitalWrite(thermostat_led, LOW); // Вимкнути LED
     92.     }
     93. 
     94.     if (message == "aerator_on") {
     95.       aerator_status = true;
     96.       digitalWrite(aerator_led, HIGH); // Увімкнути LED
     97.     } else if (message == "aerator_off") {
     98.       aerator_status = false;
     99.       digitalWrite(aerator_led, LOW); // Вимкнути LED
     100.     }
     101. 
     102.     if (message == "phController_on") {
     103.       phController_status = true;
     104.       digitalWrite(phController_led, HIGH); // Увімкнути LED
     105.     } else if (message == "phController_off") {
     106.       phController_status = false;
     107.       digitalWrite(phController_led, LOW); // Вимкнути LED
     108.     }
     109. 
     110.     // Оновлюємо дисплей після зміни стану пристрою
     111.     updateDisplay();
     112.   }
     113. }
     114. 
     115. // Генерація значень сенсорів 
     116. void updateSensors() { 
     117.   switch (currentSensor) {
     118.     case 0:
     119.       temperature += random(-15, 15) * 1; 
     120.       client.publish(temp_topic, String(temperature).c_str()); 
     121.       break;
     122.     case 1:
     123.       oxygen += random(-5, 5) * 1;        
     124.       client.publish(oxygen_topic, String(oxygen).c_str()); 
     125.       break;
     126.     case 2:
     127.       ph += random(-5, 5) * 1;       
     128.       client.publish(ph_topic, String(ph).c_str()); 
     129.       break;
     130.   }
     131.   currentSensor = (currentSensor + 1) % 3; // Перехід до наступного сенсора
     132. } 
     133.  
     134. // Оновлення OLED-дисплея 
     135. void updateDisplay() {
     136.   display.clearDisplay();
     137.   display.setCursor(0, 0);
     138.   display.setTextSize(1);
     139.   display.setTextColor(SSD1306_WHITE);
     140. 
     141.   // Відображення значень сенсорів
     142.   display.print("Temp: ");
     143.   display.print(temperature);
     144.   display.println(" C");
     145. 
     146.   display.print("Oxygen: ");
     147.   display.print(oxygen);
     148.   display.println(" mg/L");
     149. 
     150.   display.print("pH: ");
     151.   display.print(ph);
     152.   display.println("");
     153. 
     154.   // Відображення стану пристроїв
     155.   display.print("Thermostat: ");
     156.   display.println(thermostat_status ? "ON" : "OFF");
     157. 
     158.   display.print("Aerator: ");
     159.   display.println(aerator_status ? "ON" : "OFF");
     160. 
     161.   display.print("pH Controller: ");
     162.   display.println(phController_status ? "ON" : "OFF");
     163. 
     164.   display.display();
     165. }
     166.  
     167. void setup() { 
     168.   Serial.begin(115200); 
     169.   setup_wifi(); 
     170.   client.setServer(mqtt_server, mqtt_port); 
     171.   client.setCallback(callback); 
     172. 
     173.   // Налаштування пінів світлодіодів 
     174.   pinMode(thermostat_led, OUTPUT); 
     175.   pinMode(aerator_led, OUTPUT); 
     176.   pinMode(phController_led, OUTPUT); 
     177. 
     178.   if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) { 
     179.     for (;;); 
     180.   } 
     181.   display.clearDisplay(); 
     182.   display.display(); 
     183. } 
     184.  
     185. void loop() { 
     186.   if (!client.connected()) { 
     187.     reconnect(); 
     188.   } 
     189.   client.loop(); 
     190. 
     191.   if (millis() - lastSensorUpdate > sensorInterval) { 
     192.     lastSensorUpdate = millis(); 
     193.     updateSensors(); 
     194.     updateDisplay(); // Оновлення дисплея після моніторингу
     195.   } 
     196. }
     197.
     
     
     
     
     
     
     
     
     
     
     
     
     ДОДАТОК Б
     Серверна частина системи автоматизації та моніторингу IoT
     
     1. const express = require('express');
     2. const swaggerUi = require('swagger-ui-express');
     3. const swaggerDocument = require('./swagger.json');
     4. const db = require('./src/config/db');
     5. const mqtt = require('mqtt'); // MQTT клієнт
     6. 
     7. const app = express();
     8. const PORT = 3000;
     9. 
     10. // Middleware
     11. app.use(express.json());
     12. 
     13. // Swagger UI
     14. app.use('/api-docs', swaggerUi.serve, swaggerUi.setup(swaggerDocument));
     15. 
     16. // Підключення маршрутів
     17. const userRoutes = require('./src/routes/users');
     18. const aquariumRoutes = require('./src/routes/aquariums');
     19. const deviceRoutes = require('./src/routes/devices');
     20. const sensorRoutes = require('./src/routes/sensors');
     21. const logRoutes = require('./src/routes/logs');
     22. 
     23. app.use('/users', userRoutes);
     24. app.use('/aquariums', aquariumRoutes);
     25. app.use('/devices', deviceRoutes);
     26. app.use('/sensors', sensorRoutes);
     27. app.use('/logs', logRoutes);
     28. 
     29. // MQTT брокер
     30. const mqttBroker = 'mqtt://test.mosquitto.org';
     31. const mqttClient = mqtt.connect(mqttBroker);
     32. 
     33. // Теми MQTT
     34. const topics = [
     35.   { topic: 'aquarium/sensor/temperature', sensorType: 'temperature', deviceName: 'thermostat', range: [22, 28] },
     36.   { topic: 'aquarium/sensor/oxygen', sensorType: 'oxygen', deviceName: 'aerator', range: [4, 10] },
     37.   { topic: 'aquarium/sensor/ph', sensorType: 'ph', deviceName: 'phController', range: [5, 8] },
     38. ];
     39. 
     40. // Поточний сенсор
     41. let currentIndex = 0;
     42. let processing = false;
     43. 
     44. // Підключення до MQTT
     45. mqttClient.on('connect', () => {
     46.   console.log('Connected to MQTT broker');
     47.   mqttClient.subscribe(topics.map(t => t.topic), (err) => {
     48.     if (err) {
     49.       console.error('Error subscribing to topics:', err.message);
     50.     } else {
     51.       console.log('Subscribed to topics:', topics.map(t => t.topic).join(', '));
     52.     }
     53.   });
     54. });
     55. 
     56. // Обробка отриманих даних
     57. mqttClient.on('message', async (topic, message) => {
     58.   if (processing) return; // Чекаємо завершення обробки попереднього сенсора
     59. 
     60.   const { topic: currentTopic, sensorType, deviceName, range } = topics[currentIndex];
     61.   if (topic !== currentTopic) return; // Пропускаємо дані, якщо це не поточний сенсор
     62. 
     63.   processing = true; // Починаємо обробку
     64.   const value = parseFloat(message.toString());
     65.   console.log(`Received on ${sensorType}: ${value}`);
     66. 
     67.   // Оновлення значення сенсора в базі даних
     68.   try {
     69.     await db.query('UPDATE Sensors SET value = ? WHERE type = ?', [value, sensorType]);
     70.   } catch (error) {
     71.     console.error(`Error updating ${sensorType} in database:`, error.message);
     72.     processing = false;
     73.     return;
     74.   }
     75. 
     76.   // Якщо значення в нормі
     77.   if (value >= range[0] && value <= range[1]) {
     78.     await delay(5000); // Пауза перед переходом до наступного сенсора
     79.     processing = false;
     80.     currentIndex = (currentIndex + 1) % topics.length;
     81.     return;
     82.   }
     83. 
     84.   // Якщо значення поза межами норми
     85.   try {
     86.     const newValue = value < range[0] ? range[0] : range[1];
     87. 
     88.     // Логування перед корекцією
     89.     await db.query('INSERT INTO Logs (sensor_id, message) VALUES (?, ?)', [
     90.       (await getSensorId(sensorType)),
     91.       `Device ${deviceName} turned on to correct ${sensorType} from ${value} to ${newValue}`,
     92.     ]);
     93. 
     94.     // Вивід у термінал перед корекцією
     95.     console.log(`Device ${deviceName} turned on`);
     96. 
     97.     // Вмикання пристрою
     98.     mqttClient.publish('aquarium/device/control', `${deviceName}_on`);
     99. 
     100.     await delay(5000); // Пауза перед перевіркою результату
     101. 
     102.     // Оновлення значення сенсора до норми в базі даних
     103.     await db.query('UPDATE Sensors SET value = ? WHERE type = ?', [newValue, sensorType]);
     104. 
     105.     // Вивід у термінал після корекції
     106.     console.log(`Received on ${sensorType}: ${newValue}`);
     107. 
     108.     // Логування після корекції
     109.     await db.query('INSERT INTO Logs (sensor_id, message) VALUES (?, ?)', [
     110.       (await getSensorId(sensorType)),
     111.       `Device ${deviceName} turned off after correcting ${sensorType}`,
     112.     ]);
     113. 
     114.     console.log(`Device ${deviceName} turned off`);
     115. 
     116.     // Оновлення статусу пристрою в базі даних (вимикання)
     117.     await db.query('UPDATE Devices SET status = ? WHERE name = ?', ['off', deviceName]);
     118. 
     119.     // Вимикання пристрою
     120.     mqttClient.publish('aquarium/device/control', `${deviceName}_off`);
     121. 
     122.     await delay(1000); // Пауза перед переходом до наступного сенсора
     123.     processing = false;
     124.     currentIndex = (currentIndex + 1) % topics.length; // Перехід до наступного сенсора
     125.   } catch (error) {
     126.     console.error('Error during correction process:', error.message);
     127.     processing = false;
     128.   }
     129. });
     130. 
     131. // Функція для отримання ID сенсора
     132. async function getSensorId(sensorType) {
     133.   const [rows] = await db.query('SELECT id FROM Sensors WHERE type = ?', [sensorType]);
     134.   return rows.length > 0 ? rows[0].id : null;
     135. }
     136. 
     137. // Затримка
     138. function delay(ms) {
     139.   return new Promise(resolve => setTimeout(resolve, ms));
     140. }
     141. 
     142. // Тестовий маршрут
     143. app.get('/', (req, res) => {
     144.     res.send('Welcome to AquaSense API');
     145. });
     146. 
     147. // Запуск сервера
     148. app.listen(PORT, () => {
     149.     console.log(`Server is running on http://localhost:${PORT}`);
     150.     console.log(`Swagger UI is available at http://localhost:${PORT}/api-docs`);
     151. });
     152.

Посилання на відеозапис: 
